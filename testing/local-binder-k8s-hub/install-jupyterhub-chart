#!/usr/bin/env python3
"""
Makes a standalone installation of the JupyterHub Helm chart of the version
specified in the BinderHub Helm chart requirements.yaml file, and use the
configuration for the JupyterHub Helm chart nested in the BinderHub helm chart's
configuration.
"""
import os
import sys
from subprocess import check_call
from tempfile import NamedTemporaryFile

from ruamel import yaml

here = os.path.abspath(os.path.dirname(__file__))
helm_chart = os.path.join(here, os.pardir, os.pardir, "helm-chart")


def _get_jupyterhub_dependency_version():
    """
    Extract JupyterHub Helm chart version from the BinderHub chart's
    requirements.yaml
    """
    requirements_yaml = os.path.join(helm_chart, "binderhub", "requirements.yaml")

    with open(requirements_yaml) as f:
        requirements = yaml.safe_load(f)
    for dep in requirements["dependencies"]:
        if dep["name"] == "jupyterhub":
            return dep["version"]
    else:
        raise ValueError(
            f"JupyterHub as a Helm chart dependency not found in {requirements_yaml}:\n{requirements}"
        )


with NamedTemporaryFile(mode="w") as tmp:
    with open(os.path.join(helm_chart, "binderhub", "values.yaml")) as values_in:
        yaml.safe_dump(yaml.safe_load(values_in)["jupyterhub"], tmp.file)

    cmd = ["helm", "upgrade", "--install", "binderhub-test"]
    cmd.extend(
        [
            "jupyterhub/jupyterhub",
            f"--version={_get_jupyterhub_dependency_version()}",
            f"--values={tmp.name}",
            f'--values={os.path.join(here, "jupyterhub-chart-config.yaml")}',
        ]
    )
    if "--auth" in sys.argv:
        cmd.extend(
            [
                f'--values={os.path.join(here, "jupyterhub-chart-config-auth-additions.yaml")}'
            ]
        )
    print("Installing the JupyterHub Helm chart by itself")
    print(" ".join(cmd))
    check_call(cmd)
